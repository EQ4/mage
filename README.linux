== Compilation ==

Release:
$ mkdir -p builds/linux-x64-release/
$ cd builds/linux-x64-release/
$ cmake ../..
$ make

Debug:
$ mkdir -p builds/linux-x64-debug/
$ cd builds/linux-x64-debug/
$ cmake ../.. -DCMAKE_BUILD_TYPE=Debug
(or use ccmake after cmake ../.., to change BUILD_TYPE option to Debug)
$ make

Note that the naming of the folder (builds/linux-x64-...) for building out-of-source with cmake is not really important, but .gitignore is configured to ignore everything in any folder named build, builds, Build or Builds. Feel free to follow your own convention though.

=== With openFrameworks ===

to use the openFrameworks-based enterface12 application:

1. have openFrameworks compiled and installed somewhere (default: /opt/openframeworks). NB: on linux, we tested with OF version 0071, however if the organization of OF libraries didn't change, later versions (0073 at time of writing) should work fine too.
2. have OfxOsc plugin of openFrameworks compiled and installed somewhere (default: /opt/ofxosc)
3. ccmake . + set USE_OPENFRAMEWORKS to true + rerun config + change value for 

or do all of this directly in the first cmake command-line above, setting -DUSE_OPENFRAMEWORKS -DOF_ROOT_PATH and -DOFXOSC_ROOT_PATH accordingly

OfxOsc plugin can be downloaded with a CMake build config there : https://github.com/celsius/ofxosc

NB: if you manage to have OfxOsc compiled and installed within openFrameworks without jumping through hoops, good for you. I couldn't so I compiled it separately. And don't get me started on using codeblocks ...

TODO explain file tree for oF and OfxOsc


== Documentation ==

We use Doxygen to generate the documentation. The config file is in './doc'.

to generate the documentation in html and LaTeX format:

$ cd doc
$ doxygen

to generate the pdf from the LaTex, run the Makefile in './doc/latex':

$ cd latex
$ make

